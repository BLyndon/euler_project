/*
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import (
	"fmt"
	"math"
	"time"
)

func get_num_factors(sum int) int {
	n_factor := 0
	sqrt := int(math.Sqrt(float64(sum)))
	for i := 1; i <= sqrt; i++ {
		if sum%i == 0 {
			n_factor += 2
		}
	}
	if sqrt*sqrt == sum {
		n_factor--
	}
	return n_factor
}

func main() {
	start := time.Now()

	fmt.Println("")
	fmt.Println("Problem 12: Highly divisible triangular number")
	fmt.Println("")

	n_factor_max := 500

	n_factor := 0
	n := 1
	sum := 0

	for n_factor < n_factor_max {
		sum += n
		n_factor = get_num_factors(sum)
		n++
	}
	fmt.Println("Triangular number:", sum)
	fmt.Println("#divisors:", n_factor)

	elapsed := time.Since(start)
	fmt.Println("Execution time", elapsed)
	fmt.Println("")
}
